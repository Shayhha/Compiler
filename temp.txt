ass_st_2 : expr_st ';' {$$ = mknode($1, NULL, NULL);}
            | ID ';' {$$ = mknode($1, NULL, NULL);}
            | '&' ptr_value ';' {($2, NULL, NULL);}
            | CHAR_VAL ';' {$$ = mknode($1, NULL, NULL);}
            | STRING_VAL ';'{$$ = mknode($1, NULL, NULL);};

expr_st : value ADD value {$$ = mknode("+", $1, $3);}
          | value SUB value {$$ = mknode("-", $1, $3);}
          | value MULT value {$$ = mknode("*", $1, $3);}
          | value DIVIDE value {$$ = mknode("/", $1, $3);}
          | value {$$ = mknode($1, NULL, NULL);};
value : INT_VAL {$$ = mknode("int_val", NULL, NULL);}
        | FLOAT_VAL {$$ = mknode("float_val", NULL, NULL);}
        | DOUBLE_VAL {$$ = mknode("double_val", NULL, NULL);}
        | ID {$$ = mknode("id", NULL, NULL);};
ptr_value : INT_PTR {$$ = mknode("int_ptr", NULL, NULL);} 
            | FLOAT_PTR {$$ = mknode("float_ptr", NULL, NULL);} 
            | DOUBLE_PTR {$$ = mknode("double_ptr", NULL, NULL);}
            | CHAR_PTR {$$ = mknode("char_ptr", NULL, NULL);}
            | ID {$$ = mknode("id_ptr", NULL, NULL);};

              

EXPR
EXPR : TRUE_VAL {$$ = mknode("true", NULL, NULL);} | FALSE_VAL {$$ = mknode("false", NULL, NULL);};


if_st : IF '(' STRING_VAL ')' {$$ = mknode("if", mknode($3,NULL,NULL), NULL); printtree($$, 0);};


ass_st_2 : ID ';' {$$ = mknode($1, NULL, NULL);}
            | FLOAT_VAL ';' {$$ = mknode($1, NULL, NULL);}
            | DOUBLE_VAL ';' {$$ = mknode($1, NULL, NULL);}
            | INT_VAL ';' {$$ = mknode($1, NULL, NULL);}
            | CHAR_VAL ';' {$$ = mknode($1, NULL, NULL);}
            | STRING_VAL ';'{$$ = mknode($1, NULL, NULL);};









block : statement {$$ = $1;} 
        | '{' statement_recursive '}' {$$ = mknode("block", $2,NULL);};

statement_recursive : statement statement_recursive | statement;

else_statement : ELSE block {$$ = $2;};









if_statement: matched_if_statement {$$ = mknode("matched-if", $1, NULL); printtree($$, 0);} | unmatched_if_statement {$$ = mknode("unmatched-if", $1, NULL); printtree($$, 0);}

matched_if_statement : IF '(' math_expression ')' matched_if_statement ELSE matched_if_statement {$$ = mknode("if", $3, mknode("if & else", $5,$7));} | statement {$$ = mknode("statement", $1, NULL);}

unmatched_if_statement : IF '(' math_expression ')' if_statement {$$ = mknode("if", $3, $5);} | IF '(' math_expression ')' matched_if_statement ELSE unmatched_if_statement {$$ = mknode("if", $3, mknode("if & else", $5,$7));}



if (x==3||x<5) {x<-34;y<-7;} else {y<-12;}


for(int i <- 0;i<5;i+1) {
    i<-4;
    /*lmao*/
    5*6;
}
for_statement : FOR '(' assign_statement ';' condition ';' math_expression ')' block 
                        {$$ = mknode("for", mknode("assign_statement", $3, mknode("condition", $5, mknode("math_expression", $7, NULL))), mknode("for_block", $9, NULL));};







var_assignment : VAR var_list ';' {$$ = mknode("new var", $2, NULL);}

var_list : param_type ':' temp {$$ = mknode("new var", $1, $3);}
           | var_list {$$ = $1;}

temp :  ID ',' temp  {$$ = mknode($1, $3, NULL);}
        | assign_statement ',' temp {$$ = mknode("assignment", $1, $3);}
        | assign_statement {$$ = mknode("assignment", $1, NULL);}
        | ID {$$ = mknode($1, NULL, NULL);}




assign_statement : param_type ID ASSIGN expression ';' {$$ = mknode($1, mknode($2, NULL, NULL), $4);}
                     | ID ASSIGN expression ';' {$$ = mknode("assign", mknode($1, NULL, NULL), $3);};



!!!works without assignments:

var_assignment : VAR param_type ':' many_id ';' {$$ = mknode("new var", $2, $4);}            

many_id : ID ',' many_id {$$ = mknode($1, $3, NULL);} 
          | ID {$$ = mknode($1, NULL, NULL);};





ID '[' INT_VAL ']' string_assign_statement ',' many_string 
                {$$ = mknode("list", mknode("!!", mknode("id", mknode($1, NULL, NULL), mknode($3, NULL, NULL)), mknode("value", $5, NULL)), $7);}
             | ID '[' INT_VAL ']' string_assign_statement 
                {$$ = mknode("string", mknode("!!", mknode("id", mknode($1, NULL, NULL), mknode($3, NULL, NULL)), $5), NULL);};
             | 





many_string : ID '[' INT_VAL ']'
                {$$ = mknode("string", mknode($1, NULL, NULL), mknode($3, NULL, NULL));}
            | ID '[' INT_VAL ']' string_assign_statement ',' many_string 
                {$$ = mknode("list", mknode("id", mknode($1, NULL, NULL), mknode($3, NULL, NULL)), mknode("value", $5, $7));};
            | ID '[' INT_VAL ']' ',' many_string
                {$$ = mknode("list", mknode("id", mknode($1, NULL, NULL), mknode($3, NULL, NULL)), $6);}
            | ID '[' INT_VAL ']' string_assign_statement 
                {$$ = mknode("string", mknode("id", mknode($1, NULL, NULL), mknode($3, NULL, NULL)), $5);}
           





\.[0-9]*|\.[1-9][0-9]*([eE][+-]?[0-9]+)?|\.[0-9]+([eE][+-]?[0-9]+)? {yylval.strval = strdup(yytext); return DOUBLE_VAL;}


| ADD ADD value {$$ = mknode("++ value", $3, NULL);}
| value ADD ADD {$$ = mknode("value ++", $1, NULL);}  
| SUB SUB value {$$ = mknode("-- value", $3, NULL);}
| value SUB SUB {$$ = mknode("value --", $1, NULL);}

| expression ADD '=' expression {$$ = mknode("+=", $1, $4);}
| expression SUB '=' expression {$$ = mknode("-=", $1, $4);}
| expression MULT '=' expression {$$ = mknode("*=", $1, $4);}
| expression DIVIDE '=' expression {$$ = mknode("/=", $1, $4);}





public void foo(args>> int: x,y) {
    do {
        print(x,y);
        while (x<5) {
            goo(foo("asd"), 445, 0x14A3);
        }

        if (.45 > x) {
            /*this isad    
            
            asnice*/
            x<-123;
        }
        else {
            if (g>65 && (12 == lol) || "asd" != assasss) foo(goo());
            y<-1299;
        }
    } while (something<=9);
}





this gives errors, try again later:

public int foo() {
    
    var int: x;
    {
        var int: y;
        x <- 1;
        y <- 2;
        {
            x <- 2;
        }
        y <- 3;
    }
    return 0;
}

private int foo(): static {
    {
        {} /* empty code blocks are okay, although not very useful */
    }
    return 0;
}







public void foo(args>> int: x,y) {
    {x<-100;}
    do {
        print(x,y);
        while (x<5) {
            goo(foo("asd"), 445, 0x14A3);
        }

        if (.45 > x) {
            /*this isad asnice*/
            x<-123;
            for (var int: x<-4; x<5; x<-x+4) {
                for (var int: y ; f<4; f<-x+32)
                    print("lolL");
            }
        }
        else {
            if (g>65 && (12 == lol) || "asd" != assasss) foo(goo());
            y<-1299;
        }
    } while (something<=9); 
}


public void foo (args>> int: x,y,z; float: f) {
    if (x>y) {
        x<-x+y;
    }
    else {
        y<-x+y;
        z<-y*2;
        f<-z;
    }
}

public int foo(args>> int: i, j, k): static
{
var double: max, min;
private bool fee(args>> int: l, m, n; float: x, y)
{
return true;
}
return 0;
}
public void goo(args>> int: i, j, k): static
{
public bool fee(args>> float: l, m, n): static
{
return true;
}
fee(2f,3.5f,0.4f);
}









private int foo(args>> string: moshe, yoni, lol) {

    var int: y<-3;
    var float: x<-4;

    private void goo(args>> int: abc) {
        var double: z<-1;
        string w[32]<-"hello";
    }

    {
        var int: aa<-3;
        var float: bbb<-4;
        var double: cccc<-3;
    }

    do {
        var char: x <- '+';
    }
    while (x<3);
    
    while (x<3) {
        string message[34] <- "have a nice day";
    }
}

private void boo(args>> int: abc) {
    var double: a<-3;
    string b[12]<-12;
}




many_string : ID '[' INT_VAL ']' assignment ',' many_string 
                {$$ = mknode("", mknode("ID", mknode($1, NULL, NULL), mknode(concat(concat("[",$3),"]"), NULL, NULL)), mknode("ASSIGN", $5, $7));}
            | ID '[' INT_VAL ']' assignment 
                {$$ = mknode("", mknode("ID", mknode($1, NULL, NULL), mknode(concat(concat("[",$3),"]"), NULL, NULL)), mknode("ASSIGN",$5,NULL));}
            | ID '[' INT_VAL ']' ',' many_string
                {$$ = mknode("", mknode("ID", mknode($1, NULL, NULL), mknode(concat(concat("[",$3),"]"), NULL, NULL)), $6);}
            | ID '[' INT_VAL ']'
                {$$ = mknode("", mknode($1, NULL, NULL), mknode(concat(concat("[",$3),"]"), NULL, NULL));};


function_call : ID '(' function_params ')' {$$ = mknode(concat($1,"( params: ... )"), $3, NULL);}
                | ID '(' ')' {$$ = mknode(concat($1,"()"), NULL, NULL);}


function_params : expression ',' function_params {$$ = mknode("", $1, $3);}
                | expression {$$ = $1;}